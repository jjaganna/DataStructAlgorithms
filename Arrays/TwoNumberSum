Two Number Sum (Easy)
————————-------------------------
Write a function that takes in a non-empty array of distinct integers and an integer representing a target sum. If any two numbers in the input array sum up to the target sum, the function should return them in an array, in any order. If no two numbers sum up to the target sum, the function should return an empty array. 
Note that the target sum has to be obtained by summing two different integers in the array; you can't add a single integer to itself in order to obtain the target sum. 
You can assume that there will be at most one pair of numbers summing up to the target sum. 


Sample Input:

array = [3, 5, -4, 8, 11, 1, -1, 6]
targetSum = 10

Sample Output

[-1, 11]

Hints:

Hint1: Try using 2 for loops to sum all possible pairs of numbers in the input array. What are the time and space implications of this approach?

Hint 2:  Realize that for every number X in the input array, you are essentially trying to find a corresponding number Y such that X + Y = targetSum.
With two variables in this equation known to you, it should not be hard to solve for Y.

Hint 3:  Try sorting every number in a hash table, solving the equation mentioned in Hint #2 for every number and checking if the Y that you find is stored
In the hash table. What are the time and space implications of this approach?

Hint 4: Optimal Space & Time Complexity
O(n) time | O(n) space - where n is the length of the input array.



==========================================================================
Sandbox

Import program
Import unittest

Class TestProgram(unites.TestCase):
       def test_case_1(self):
              output  =  program.twoNumberSum([3, 5, -4, 8, 11, 1, -1, 6])
              self.assertTrue(len(output) == 2)
              self.assertTrue(11 in output)
              self.assertTrue(-1 in output)

=========================================================================

My Solution 1:   O(n^2) time / O(1) storage

def twoNumberSum(array, targetSum):
    # Write your code here.
    for i in range(len(array) - 1):
        num_needed = targetSum - array[i]
        for j in range(i + 1, len(array)):
            if num_needed == array[j]:
                return [array[i], array[j]]
    return []

My Solution 2:  O(n) time/ O(n) storage

def twoNumberSum(array, targetSum):
    myset = set()
    for num in array:
        num_needed = targetSum - num
        if num_needed in myset:
            return [num, num_needed]
        else:
            myset.add(num)            
    return []


My Solution 3: O(n) time / O(n) storage

def twoNumberSum(array, targetSum):
    myset = set()

    for num in array:
        num_needed = targetSum - num
        if  num_needed in myset and num != num_needed:
            return [num, num_needed]
        else:
            myset.add(num_needed)

    return []
            

———————————————————————

Algoexpert Solution1 :

def twoNumberSum(array, targetSum):
      for i in range(len(array) - 1):
        firstNum = array[i]
        for j in range(i + 1, len(array)):
            secondNum == array[j]:
            If firstNum + secondNum == targetSum:
                 return [firstNum, secondNum]
    return []



Algoexpert Solution 2:  O(n) time / O(n) storage


def twoNumberSum(array, targetSum):
   
    nums = {}

    for num in array:
        num_needed = targetSum - num
        if  num_needed in nums:
              return [num, num_needed]
        else:
              nums[num] = True

    return []



Algoexpert Solution 3: Using 2 pointers — O(nlog(n)) time / O(1) storage


def twoNumberSum(array, targetSum):
    array.sort()
    left = 0
    right = len(array) - 1

    while (left < right):
        if array[left] + array[right] == targetSum:
            return [array[left], array[right]]
        elif array[left] + array[right] < targetSum:
            left += 1
        else:
            right -= 1

    return []
====================================================
