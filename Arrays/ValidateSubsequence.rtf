{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww22140\viewh14960\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Validate Subsequence\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
Given two non-empty arrays of integers, write a function that determines whether the second array is a subsequence of the first one.\
\
A subsequence of an array is a set of numbers that are not necessarily adjacent in the array but that are in the same order as they appear in the array.\
For instance, the numbers [1, 3, 4] form a subsequence of the array  [1,2,3,4], an so do numbers [2.4].\
\
Note that a single number in an array and the array itself are both valid subsequences of the array.\
\
Optimal Space & Time Complexity\
\
O9n) time | O(1) space - where n is the length of the array.\
\
\'97\'97\'97\'97\'97\
Solution 1:\
\
def isValidSubsequence(array, sequence):    \
    m = len(array)\
    n = len(sequence)\
    If m < n:\
         return False;\
    \
    i = 0 # ptr for sequence\
    j = 0 # ptr for array\
    while i < n and j < m:\
        if array[j] == sequence[i]:\
            i += 1\
            j += 1\
        else:\
            j+= 1\
\
     if i == n:\
         return True\
\
     return False\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Solution 2:\
\
\
def isValidSubsequence(array, sequence):\
\
    m = len(array)\
    n = len(sequence)\
\
    if m < n:\
        return False\
        \
    i = 0 # ptr for sequence\
    for j in range(m):\
        if array[j] == sequence[i]:\
            i += 1\
        if i == n:\
            return True\
\
    return False\
\
\
=============================\
\
Algoexpert solution:\
\
Solution1:\
# O(n) time | O(1) space\
\
def isValidSubsequence(array, sequence):\
    arrIdx = 0\
    seqIdx = 0\
    while arrIdx < len(array) and seqIdx < len(sequence):\
        if array[arrIdx] == sequence[seqIdx]:\
            seqIdx +=1\
        arrIdx +=1 \
\
    return seqIdx == len(sequence)\
\
\
Solution2:\
\
def isValidSubsequence(array, sequence):\
  \
    seqIdx = 0\
    for value in array:\
         If seqIdx == len(sequence):\
              return True\
         if value == sequence(seqIdx):\
              seqIdx += 1\
\
   return seqIdx == len(sequence)\
         \
=================================\
           \
\
Note: https://leetcode.com/problems/is-subsequence/\
\
class Solution:\
    def isSubsequence(self, s: str, t: str) -> bool:\
        m = len(s)\
        if m == 0:\
            return True\
        \
        n = len(t)\
        if n == 0 and m > 0:\
            return False\
        \
        i = 0\
        j = 0 \
        while (i < m) and (j < n):\
            if s[i] == t[j]:\
                i += 1\
                j += 1\
            else:\
                j += 1\
       \
            \
        if i == m:\
            return True\
        \
        return False\
        }